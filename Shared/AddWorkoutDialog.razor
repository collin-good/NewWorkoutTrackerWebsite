@using WorkoutTrackerWebsite.Models;
@using WorkoutTrackerWebsite.Controllers;
@inject HttpClient HttpClient
@inject WorkoutController workoutController

<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            <h2>Enter your workout: </h2>
        </div>
        <EditForm class="dialog-body" Model=@WorkoutParam OnValidSubmit="OnValidSubmit"
            OnInvalidSubmit="@(() => isError = true)">
            <DataAnnotationsValidator />

            <label>Workout Name: </label>
            <InputText @bind-Value="@WorkoutParam.Name" />
            <ValidationMessage For="@(() => WorkoutParam.Name)" />

            <label>Date: </label>
            <InputDate @bind-Value="@WorkoutParam.Date"></InputDate>
            <ValidationMessage For="@(() => WorkoutParam.Date)" />

            <label>Weight: </label>
            <InputNumber @bind-Value="@WorkoutParam.Weight" />
            <ValidationMessage For="@(() => WorkoutParam.Weight)" />

            <label>Sets: </label>
            <InputNumber @bind-Value="@WorkoutParam.Sets" />
            <ValidationMessage For="@(() => WorkoutParam.Sets)" />

            <label>Total Reps: </label>
            <InputNumber @bind-Value="@WorkoutParam.Reps" />
            <ValidationMessage For="@(() => WorkoutParam.Reps)" />

            <button @onclick="OnCancelWorkoutAdd">Cancel</button>
            <input type="submit" class="btn btn-primary" value="Add" disabled=@isError />
        </EditForm>
    </div>
</div>

@code
{
    [Parameter] public Workout WorkoutParam { get; set; } = new();
    [Parameter] public EventCallback<Workout> OnConfirmWorkoutAdd { get; set; }
    [Parameter] public EventCallback OnCancelWorkoutAdd { get; set; }

    bool isError = false;

    void OnValidSubmit()
    {
        isError = false;
        OnConfirmWorkoutAdd.InvokeAsync(WorkoutParam);
    }
}